{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Firrtl",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#identifiers"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "match": ";.*$\\n?",
                    "name": "comment.line.semicolon.firrtl"
                },
                {
                    "match": "@\\[.+\\]",
                    "name": "comment.line.fileinfo.firrtl"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "match": "\\b(\\d[\\d_]*)\\b",
                    "name": "constant.numeric.decimal.firrtl"
                },
                {
                    "match": "\"h([\\-]?[0-9a-fA-F]*)\"",
                    "name": "constant.numeric.hex.firrtl"
                },
                {
                    "match": "\"o([\\-]?[0-7]*)\"",
                    "name": "constant.numeric.octal.firrtl"
                },
                {
                    "match": "\"b([\\-]?[01]*)\"",
                    "name": "constant.numeric.bit.firrtl"
                },
                {
                    "match": "\\b(\\-\\d+)\\b",
                    "name": "constant.numeric.signed.firrtl"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "match": "\\s*\\b(add|sub|mul|eq|neq|geq|dshl|dshr|shl|not|and|or|neg|cvt|asUInt|asSInt|asClock|pad|cat|bits|mux|validif)\\b(?=\\()",
                    "name": "support.function.firrtl"
                },
                {
                    "match": "\\s*\\b(div|rem|gt|leq|lt|shr|xor|andr|orr|xorr|head|tail)\\b(?=\\()",
                    "name": "support.function.firrtl"
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "match": "(?<=(node ))[A-Za-z0-9_]+|(?<=(module ))[A-Za-z0-9_]+|(?<=(reg ))[A-Za-z0-9_]+|(?<=(wire ))[A-Za-z0-9_]+|(?<=inst )[A-Za-z0-9_]+",
                    "name": "variable.other.identifier.firrtl"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "match": "\\s*\\b(skip|wire|infer|read|write|rdwr|mport|output|input|cmem|smem|when|else|node|flip)\\b",
                    "name": "keyword.firrtl"
                },
                {
                    "match": "^\\W*inst",
                    "name": "keyword.firrtl"
                },
                {
                    "match": "\\s*\\b(reg|((with)(?=\\W*:\\W*\\()))|((reset)(?=\\W*=>\\W*))\\b",
                    "name": "keyword.firrtl"
                },
                {
                    "match": "(([SU]Int.\\d+>)|[SU]Int.\\d+>\\[\\d+\\]|[SU]Int|[SU]Int\\[\\d+\\]|[SU]Int\\[\\d+\\]\\[\\d+\\]|[SU]Int.\\d+>\\[\\d+\\]\\[\\d+\\]|Clock|module|circuit|extmodule)",
                    "name": "support.class.firrtl"
                },
                {
                    "match": "invalid",
                    "name": "invalid.firrtl"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "match": "(<=|<\\-)",
                    "name": "keyword.operator.math.firrtl"
                },
                {
                    "match": "(:|{|})",
                    "name": "entity.name.firrtl"
                }
            ]
        }
    },
    "scopeName": "source.firrtl"
}